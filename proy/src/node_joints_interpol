#!/usr/bin/env python
import rospy
import numpy as np
from sensor_msgs.msg import JointState
pi = np.pi
sin = np.sin

if __name__ == "__main__":
  
  rospy.init_node("jointsNode") 
  pub = rospy.Publisher('joint_states', JointState, queue_size=10)
  
  # Nombres de las articulaciones
  jnames = ("base_joint", "hombro_joint", "antebrazo_joint", "ante_brazo_joint",
              "brazo_joint", "brazo_mano_joint", "mano_joint")
  # Configuracion articular deseada (en radianes)
  jvalues = [2.2, 0.62, -0.75, 1.18, 0, 0.47, 0.85]

  # Objeto (mensaje) de tipo JointState
  jstate = JointState()
  # Asignar valores al mensaje
  jstate.header.stamp = rospy.Time.now()
  jstate.name = jnames
  jstate.position = jvalues
  
  # Frecuencia del envio (en Hz)
  rate = rospy.Rate(100)
  i = 0

  # Bucle de ejecucion continua
  while not rospy.is_shutdown():

    # Tiempo actual (necesario como indicador para ROS)
    jstate.header.stamp = rospy.Time.now()
    i += 1
    s = sin(2*pi/100*i/5)/2+0.5
    jstate.position = [2.2 + (-3.04)*s, 0.62 + (0.64)*s, -0.75 + (0.51)*s, 1.18 + (-0.79)*s, 0 + (-0.89)*s, 0.47 + (-1.12)*s, 0.85 + (-1.51)*s]
    [0 + (-pi)*s, pi/2 + (-pi)*s, -pi/4+(pi/4)*s, 0.0, pi/2, 0.0, pi/4+(-3*pi/4)*s, -pi/2+(-pi/2)*s]
    # Publicar mensaje
    pub.publish(jstate)
    # Esperar hasta la siguiente iteracion
    rate.sleep()
