#!/usr/bin/env python
#

from __future__ import print_function
import rospy
from sensor_msgs.msg import JointState
from std_msgs.msg import String

from markers import *
from functions import *
import numpy as np

def callback(msg):
    i = 0.05
    global xd
    key = msg.data
    if(key=="q"):
        xd[0] += i
    elif(key=="a"):
        xd[0] -= i
    
    if(key=="w"):
        xd[1] += i
    elif(key=="s"):
        xd[1] -= i
 
    if(key=="e"):
        xd[2] += i
    elif(key=="d"):
        xd[2] -= i
    
    xdnorm = np.linalg.norm(xd)
    if xdnorm>0.5:
        xd = xd*0.5/xdnorm

# Initialize the node
rospy.init_node("keyboard_diffkine")
print('starting motion ... ')
# Publisher: publish to the joint_states topic
pub = rospy.Publisher('joint_states', JointState, queue_size=10)
# Subscriber: read from the keys topic
rospy.Subscriber("/keys", String, callback)
# Files for the logs
fxcurrent = open("/home/user/proyecto_ws/src/proy/graphs/xcurrent.txt", "w")                
fxdesired = open("/home/user/proyecto_ws/src/proy/graphs/xdesired.txt", "w")
fq = open("/home/user/proyecto_ws/src/proy/graphs/q.txt", "w")

# Markers for the current and desired positions
bmarker_current  = BallMarker(color['RED'])
bmarker_desired = BallMarker(color['GREEN'])

# Joint names
jnames = ["base_joint", "hombro_joint", "antebrazo_joint", "ante_brazo_joint", "brazo_joint", "brazo_mano_joint", "mano_joint"]

# Desired position
xd = np.array([0.34, -0.225, 0.1491])
# Initial configuration
q0 = np.array([-0.732,  1.101,  0.13,  -1.896, -1.589,  0.134,  0.   ])

# Resulting initial position (end effector with respect to the base link)
T = fkine(q0)
x0 = T[0:3,3]

# Red marker shows the achieved position
bmarker_current.xyz(x0)
# Green marker shows the desired position
bmarker_desired.xyz(xd)

# Instance of the JointState message
jstate = JointState()
# Values of the message
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
jstate.position = q0

# Frequency (in Hz) and control period 
freq = 200
dt = 1.0/freq
rate = rospy.Rate(freq)

# Initial joint configuration
q = copy(q0)

# Control Gain
k = 2.9
epsilon = 0.002

# Main loop
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Kinematic control law for position (complete here)
    # -----------------------------
    x = fkine(q)[0:3,3]
    e = x-xd
    #print(np.linalg.norm(e))
    de = -k*e
    J = jacobian_position(q)
    dq = np.linalg.pinv(J).dot(de)
    q = q+dt*dq
    # -----------------------------

    
    # Log values                                                      
    fxcurrent.write(str(x[0])+' '+str(x[1]) +' '+str(x[2])+'\n')
    fxdesired.write(str(xd[0])+' '+str(xd[1])+' '+str(xd[2])+'\n')
    fq.write(str(q[0])+" "+str(q[1])+" "+str(q[2])+" "+str(q[3])+" "+
             str(q[4])+" "+str(q[5])+" "+str(q[6])+"\n")
    
    # Publish the message
    jstate.position = q
    pub.publish(jstate)
    bmarker_desired.xyz(xd)
    bmarker_current.xyz(x)

    #if np.linalg.norm(e) < epsilon:
    #    break

    # Wait for the next iteration
    rate.sleep()

print('ending motion ...')
fxcurrent.close()
fxdesired.close()
fq.close()
